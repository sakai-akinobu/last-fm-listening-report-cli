import * as fs from 'fs';
import * as path from 'path';
import * as commander from 'commander';

import * as tableFormatter from './table-formatter';
import * as apiUser from './api/user';

const program = commander
  .option('-k, --api-key [api-key]', 'API key generated by Last.fm. See also https://www.last.fm/api')
  .option('-u, --user [user]', 'User name on Last.fm.')
  .option('-p, --period [period]', 'The time period over which to retrieve. default 1month. overall | 7day | 1month | 3month | 6month | 12month')
  .option('-l, --limit [limit]', 'The number of results to fetch. default 3.')
  .parse(process.argv);

let {apiKey, user} = program;
const {period, limit} = program;

if (!apiKey && process.env.LASTIFY_API_KEY) {
  apiKey = process.env.LASTIFY_API_KEY;
}
if (!user && process.env.LASTIFY_USER) {
  user = process.env.LASTIFY_USER;
}

if (!apiKey) {
  process.stderr.write(`--api-key argument is required.\n`);
  process.exit(1);
}
if (!user) {
  process.stderr.write(`--user argument is required.\n`);
  process.exit(1);
}

Promise.all([
  apiUser.getRecentTracks(apiKey, user, limit),
  apiUser.getTopAlbums(apiKey, user, period, limit),
  apiUser.getTopArtists(apiKey, user, period, limit),
  apiUser.getTopTracks(apiKey, user, period, limit),
])
.then(([
  recentTracks,
  topAlbums,
  topArtists,
  topTracks,
]) => {
  process.stdout.write(
    [
      tableFormatter.recentTracks(recentTracks),
      tableFormatter.topAlbums(topAlbums),
      tableFormatter.topArtists(topArtists),
      tableFormatter.topTracks(topTracks),
    ].join('\n'),
  );
  process.exit(0);
})
.catch(e => {
  process.stderr.write(`${e.message}\n`);
  process.exit(1);
});
